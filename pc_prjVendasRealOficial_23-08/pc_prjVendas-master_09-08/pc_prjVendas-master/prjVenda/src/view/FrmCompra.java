/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import dao.*;
import java.awt.Component;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.*;

/**
 *
 * @author aluno
 */
public class FrmCompra extends javax.swing.JInternalFrame {

    ArrayList<DaoFornecedor> forn;

    ArrayList<DaoItemCompra> itc;

    NumberFormatter nfPreco;
    MaskFormatter mfData;

    boolean alterar = false;
    boolean incluir = false;
    boolean alterarItem = false;
    boolean IncluirItem = false;
    boolean encerrado = false;

    /**
     * Creates new form FrmVenda
     */
    public FrmCompra() {
        initComponents();

        DecimalFormat df = new DecimalFormat("R$ #,###,##0.00;-R$ ###,#,###,##).00");
        nfPreco = new NumberFormatter(df);
        nfPreco.setValueClass(Double.class);

        try {

            DaoFornecedor fornecedor = new DaoFornecedor();
            forn = new ArrayList<DaoFornecedor>();
            forn.addAll(fornecedor.pesquisar(fornecedor));
            for (DaoFornecedor daoFornecedor : forn) {

                cmbFornecedor.addItem(String.valueOf(daoFornecedor.getCodFor()));

            }
            cmbFornecedor.setSelectedIndex(0);

            itc = new ArrayList<DaoItemCompra>();

            mfData = new MaskFormatter("##/##/####");
            mfData.setPlaceholderCharacter('_');
            mfData.setValueContainsLiteralCharacters(true);
            mfData.setValueClass(String.class);
            DefaultFormatterFactory dffData = new DefaultFormatterFactory(mfData);
            txtDataCompra.setFormatterFactory(dffData);
            txtDataEntrega.setFormatterFactory(dffData);

        } catch (Exception ex) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnincluir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        pnlVenda = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumCompra = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbFornecedor = new javax.swing.JComboBox<>();
        txtFornecedor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        txtDataCompra = new javax.swing.JFormattedTextField();
        txtDataEntrega = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCompra = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        pnlDetalhes = new javax.swing.JPanel();
        btnItemIncluir = new javax.swing.JButton();
        btnItemAlterar = new javax.swing.JButton();
        btnItemExcluir = new javax.swing.JButton();
        btnItemPesquisar = new javax.swing.JButton();
        btnEncerrar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProduto = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtTotalVenda = new javax.swing.JTextField();

        setTitle("Cadastro de Compra");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnincluir.setText("Incluir");
        btnincluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnincluirActionPerformed(evt);
            }
        });

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnGravar.setText("Gravar");
        btnGravar.setEnabled(false);
        btnGravar.setName("Gravar"); // NOI18N
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setDefaultCapable(false);
        btnCancelar.setEnabled(false);
        btnCancelar.setName("Cancelar"); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        pnlVenda.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        pnlVenda.setEnabled(false);

        jLabel1.setText("Compra");

        jLabel2.setText("Fornecedor");

        cmbFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFornecedorActionPerformed(evt);
            }
        });

        txtFornecedor.setEditable(false);

        jLabel3.setText("Data Compra");

        jLabel4.setText("Data Entrega");

        jLabel5.setText("Obs");

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        javax.swing.GroupLayout pnlVendaLayout = new javax.swing.GroupLayout(pnlVenda);
        pnlVenda.setLayout(pnlVendaLayout);
        pnlVendaLayout.setHorizontalGroup(
            pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVendaLayout.createSequentialGroup()
                .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlVendaLayout.createSequentialGroup()
                        .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlVendaLayout.createSequentialGroup()
                                .addComponent(txtNumCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addComponent(txtDataCompra))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlVendaLayout.createSequentialGroup()
                                .addComponent(cmbFornecedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlVendaLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1))
                .addGap(17, 17, 17))
        );
        pnlVendaLayout.setVerticalGroup(
            pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(txtDataCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Compra Nº", "Fornecedor Nº", "Nome do Fornecedor", "Vendido em", "Entrega em", "Obs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCompraMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCompra);
        if (tblCompra.getColumnModel().getColumnCount() > 0) {
            tblCompra.getColumnModel().getColumn(0).setResizable(false);
            tblCompra.getColumnModel().getColumn(1).setResizable(false);
            tblCompra.getColumnModel().getColumn(2).setResizable(false);
            tblCompra.getColumnModel().getColumn(3).setResizable(false);
            tblCompra.getColumnModel().getColumn(4).setResizable(false);
            tblCompra.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel6.setText("Detalhes");

        pnlDetalhes.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        pnlDetalhes.setEnabled(false);

        btnItemIncluir.setText("Incluir");
        btnItemIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemIncluirActionPerformed(evt);
            }
        });

        btnItemAlterar.setText("Alterar");
        btnItemAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemAlterarActionPerformed(evt);
            }
        });

        btnItemExcluir.setText("Excluir");
        btnItemExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemExcluirActionPerformed(evt);
            }
        });

        btnItemPesquisar.setText("Pesquisar");
        btnItemPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemPesquisarActionPerformed(evt);
            }
        });

        btnEncerrar.setText("Encerrar");
        btnEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncerrarActionPerformed(evt);
            }
        });

        tblProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Descrição", "Quantidade", "SubTotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblProduto);

        javax.swing.GroupLayout pnlDetalhesLayout = new javax.swing.GroupLayout(pnlDetalhes);
        pnlDetalhes.setLayout(pnlDetalhesLayout);
        pnlDetalhesLayout.setHorizontalGroup(
            pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDetalhesLayout.createSequentialGroup()
                        .addComponent(btnItemIncluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnItemAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnItemExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnItemPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEncerrar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDetalhesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlDetalhesLayout.setVerticalGroup(
            pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnItemIncluir)
                    .addComponent(btnItemAlterar)
                    .addComponent(btnItemExcluir)
                    .addComponent(btnItemPesquisar)
                    .addComponent(btnEncerrar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(0));

        jLabel7.setText("Total da Venda:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(pnlDetalhes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnincluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAlterar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExcluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesquisar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGravar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSair))
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnincluir)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnPesquisar)
                    .addComponent(btnGravar)
                    .addComponent(btnCancelar)
                    .addComponent(btnSair))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDetalhes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnGravar.getAccessibleContext().setAccessibleDescription("Gravar");
        btnCancelar.getAccessibleContext().setAccessibleDescription("Cancelar");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCompraMouseClicked
        // TODO add your handling code here:

        if (tblCompra.getRowCount() > 0) {
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblCompra.getValueAt(tblCompra.getSelectedRow(), 0));
            try {

                txtTotalVenda.setText("R$ 0,00");
                atualizaTableItem(item.Pesquisar(item));

            } catch (Exception ex) {

            }
        }

    }//GEN-LAST:event_tblCompraMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        dispose();

    }//GEN-LAST:event_formWindowClosing

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // TODO add your handling code here:

        formWindowClosing(null);

    }//GEN-LAST:event_btnSairActionPerformed

    private void btnincluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnincluirActionPerformed
        // TODO add your handling code here:

        DaoCliente cliente;

        try {

            HabilitarBotoes(false);
            habilitarCampos(false, pnlDetalhes);
            habilitarCampos(true, pnlVenda);
            cmbFornecedorActionPerformed(null);
            txtObs.setEnabled(true);
            LimparCampos(pnlVenda);
            txtObs.setText("");
            txtNumCompra.setEnabled(false);
            incluir = true;

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n"
                    + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnincluirActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        DaoVenda venda = new DaoVenda();

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        System.out.println(incluir);

        try {

            if (incluir) {

                venda.setCodCli(Integer.valueOf(cmbFornecedor.getSelectedItem().toString()));
                venda.setDataVenda(sdf.parse(txtDataCompra.getText()));
                venda.setDataEntrega(sdf.parse(txtDataEntrega.getText()));
                venda.setObs(txtObs.getText());
                venda.incluir();
                System.out.println(venda.getCodCli());

            } else if (alterar) {

                venda.setNumVenda(Integer.valueOf(txtNumCompra.getText()));
                venda.setCodCli(Integer.valueOf(cmbFornecedor.getSelectedItem().toString()));
                venda.setDataVenda(sdf.parse(txtDataCompra.getText()));
                venda.setDataEntrega(sdf.parse(txtDataEntrega.getText()));
                venda.setObs(txtObs.getText());
                venda.alterar();

            }

            btnCancelarActionPerformed(null);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no banco de dados" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }catch(ClassNotFoundException ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro na conexão" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao incluir" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        formWindowOpened(null);
        HabilitarBotoes(true);
        LimparCampos(pnlVenda);
        txtObs.setText("");
        habilitarCampos(false, pnlVenda);
        habilitarCampos(true, pnlDetalhes);
        txtObs.setEnabled(false);
        incluir = false;
        alterar = false;


    }//GEN-LAST:event_btnCancelarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        DaoVenda venda = new DaoVenda();
        DaoItemVenda item = new DaoItemVenda();
        System.out.println("lalala");
        try {

            if (venda.Pesquisar(venda).isEmpty()) {

                JOptionPane.showMessageDialog(null, "Não há vendas cadastradas!",
                        "Atenção", JOptionPane.WARNING_MESSAGE);

            } else {

                atualizaTableVendas(venda.Pesquisar(venda));
                tblCompra.addRowSelectionInterval(0, 0);
                item.setNumVenda((Integer) tblCompra.getValueAt(0, 0));
                if (item.Pesquisar(item).isEmpty()) {

                    JOptionPane.showMessageDialog(null, "Não há itens cadastrados!",
                            "Atenção", JOptionPane.WARNING_MESSAGE);

                } else {
                    atualizaTableItem(item.Pesquisar(item));
                }

            }
            habilitarCampos(false, pnlVenda);
            txtObs.setEnabled(false);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao abrir o form BD" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }catch(ClassNotFoundException ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao abrir o form con" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao abrir o form" + ex.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_formWindowOpened

    private void cmbFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFornecedorActionPerformed
        // TODO add your handling code here:
        txtFornecedor.setText(forn.get(cmbFornecedor.getSelectedIndex()).getRazao());
    }//GEN-LAST:event_cmbFornecedorActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
        DaoFornecedor fornecedor = new DaoFornecedor();
        try {

            HabilitarBotoes(false);

            habilitarCampos(false, pnlDetalhes);
            habilitarCampos(true, pnlVenda);

            forn.clear();
            forn.addAll(fornecedor.pesquisar(fornecedor));

            for (DaoFornecedor fornec : forn) {

                cmbFornecedor.addItem(String.valueOf(fornec.getCodFor()));

            }

            txtNumCompra.setEnabled(false);
            txtObs.setEnabled(true);
            if (tblCompra.getRowCount() > 0) {

                int posLinha = tblCompra.getSelectedRow();

                if (posLinha >= 0) {
                    txtNumCompra.setText(tblCompra.getValueAt(posLinha, 0).toString());
                    for (DaoFornecedor daoCliente : forn) {
                        if (daoCliente.getCodFor()== Integer.valueOf(
                                tblCompra.getValueAt(posLinha, 1).toString())) {
                            cmbFornecedor.setSelectedIndex(forn.indexOf(daoCliente));
                        }
                    }

                    txtFornecedor.setText(tblCompra.getValueAt(posLinha, 2).toString());
                    txtDataCompra.setValue(tblCompra.getValueAt(posLinha, 3).toString());
                    txtDataEntrega.setValue(tblCompra.getValueAt(posLinha, 4).toString());
                    txtObs.setText(tblCompra.getValueAt(posLinha, 5).toString());
                } else {

                    JOptionPane.showMessageDialog(null, "Selecione uma venda para alterar!",
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    btnCancelarActionPerformed(null);

                }

            } else {
                JOptionPane.showMessageDialog(null, "Não existem vendas cadastradas!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                btnCancelarActionPerformed(null);
            }
            txtDataCompra.requestFocus();
            alterar = true;

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de Dados:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Driver de Conexão:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:

        try {

            if (tblCompra.getSelectedRow() > 0) {
                Object[] options = {"Sim", "Não"};
                if (JOptionPane.showOptionDialog(this, "Deseja mesmo apagar a venda"
                        + "Selecionada?", "Aviso", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null,
                        options, options[1]) == JOptionPane.YES_OPTION) {

                    DaoVenda dv = new DaoVenda();
                    DaoItemVenda di = new DaoItemVenda();

                    di.setNumVenda(Integer.valueOf(tblCompra.getValueAt(
                            tblCompra.getSelectedRow(), 0).toString()));
                    dv.setNumVenda(di.getNumVenda());

                    di.excluir();
                    if (dv.excluir()) {
                        JOptionPane.showMessageDialog(null, "Venda excluida!",
                                "Exclusão", JOptionPane.INFORMATION_MESSAGE);
                    }

                    formWindowOpened(null);
                }

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        DaoVenda dv = new DaoVenda();
        DaoItemVenda di = new DaoItemVenda();
        try {

            String numVendaTemp = JOptionPane.showInputDialog(this, "Informe o numero da venda "
                    + "desejada:", "Pesquisa", JOptionPane.QUESTION_MESSAGE);
            if (numVendaTemp != null) {
                dv.setNumVenda(Integer.valueOf(numVendaTemp));
                di.setNumVenda(dv.getNumVenda());

                if (dv.Pesquisar(dv).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Venda não encontrada!",
                            "Erro:", JOptionPane.ERROR_MESSAGE);
                } else {
                    if (di.getNumVenda() < 1) {

                        dv.setNumVenda(0);
                        di.setNumVenda(dv.getNumVenda());

                        atualizaTableVendas(dv.Pesquisar(dv));

                        tblCompra.setRowSelectionInterval(0, 0);

                        //tblVendaMouseClicked(null);
                    }
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de Dados:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Driver de Conexão:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n"
                    + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnItemIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemIncluirActionPerformed
        // TODO add your handling code here:
        try {

            DaoItemCompra item = new DaoItemCompra();
            item.setNumVenda((Integer) tblCompra.getValueAt(tblCompra.getSelectedRow(), 0));

            if (item.Pesquisar(item).isEmpty()) {
                //item = FrmItemVendaCompra.showItemVenda(item);

                for (DaoItemCompra daoIt : itc) {
                    if (daoIt.getCodPro() == item.getCodPro()) {
                        JOptionPane.showMessageDialog(null, "Produto ja cadastrado!",
                                "Erro", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (item != null) {
                    itc.add(item);
                    //atualizaTableItem(itc);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível adicionar Itens nessa venda!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n" + ex.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnItemIncluirActionPerformed

    private void btnEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncerrarActionPerformed
        // TODO add your handling code here:
        if (!itc.isEmpty()) {
            try {
                if (JOptionPane.showConfirmDialog(this, "Deseja mesmo encerrar a venda?",
                        "Atenção", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                    for (DaoItemCompra daoItem : itc) {
                        daoItem.incluir();
                    }
                    itc.clear();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n" + ex.getMessage(),
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEncerrarActionPerformed

    private void btnItemAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemAlterarActionPerformed
        // TODO add your handling code here:
        try{
            
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer)tblCompra.getValueAt(tblCompra.getSelectedRow(), 0));
            
            if(item.Pesquisar(item).isEmpty()){
                
                if(tblProduto.getSelectedRow() >= 0){
                    //item = itc.get(tblProduto.getSelectedRow());
                    if(item != null){
                        item = FrmItemVenda.showItemVenda(item);
                        
                        for (DaoItemCompra daoIt : itc) {
                            if(daoIt.getCodPro() == item.getCodPro()){
                                JOptionPane.showMessageDialog(null, "O produto ja cadastrado!",
                                        "Erro", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                        //itc.set(tblProduto.getSelectedRow(), item);
                        //atualizaTableItem(itc);
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Selecione um produto para alterar!",
                                        "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n" + ex.getMessage(),
                                        "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnItemAlterarActionPerformed

    private void btnItemExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemExcluirActionPerformed
        // TODO add your handling code here:
        try{
            
            Object[] botoes = {"Sim","Não"};
            
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer)tblCompra.getValueAt(tblCompra.getSelectedRow(), 0));
            
            if(item.Pesquisar(item).isEmpty()){
                
                if(tblProduto.getSelectedRow() >= 0){
                    //item = itc.get(tblProduto.getSelectedRow());
                    if(JOptionPane.showOptionDialog(null, 
                            "Deseja apagar o produto?", "Atenção", 
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                            null, botoes, botoes[1]) == JOptionPane.YES_OPTION){
                     
                        itc.remove(item);
                        //atualizaTableItem(itc);
                        
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Selecione um produto primeiro",
                                        "Erro", JOptionPane.ERROR_MESSAGE);
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "A venda está encerrada",
                                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n" + ex.getMessage(),
                                        "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnItemExcluirActionPerformed

    private void btnItemPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemPesquisarActionPerformed
        // TODO add your handling code here:
        DaoVenda dv = new DaoVenda();
        DaoItemVenda di = new DaoItemVenda();
        try{
            
            String CodProTemp = JOptionPane.showInputDialog(this, 
                    "Informe o código do produto:","Pesquisa",
                    JOptionPane.QUESTION_MESSAGE);
            if(CodProTemp != null){
                dv.setNumVenda((Integer)tblCompra.getValueAt(tblCompra.getSelectedRow(), 0));
                di.setNumVenda(Integer.valueOf(dv.getNumVenda()));
                di.setCodPro(Integer.valueOf(CodProTemp));
                if(di.Pesquisar(di).isEmpty()){
                    JOptionPane.showMessageDialog(null, "Produto não encontrado!",
                                        "Erro", JOptionPane.ERROR_MESSAGE);
                }else{
                    atualizaTableItem(di.Pesquisar(di));
                }
            }
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Ocorreu um erro:\n" + ex.getMessage(),
                                        "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnItemPesquisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCompra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCompra().setVisible(true);
            }
        });
    }

    private void LimpaTable(JTable table) {

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }

    }

    private void atualizaTableVendas(ArrayList<DaoVenda> vendas) {

        LimpaTable(tblCompra);

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        if (vendas.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não foram encontradas vendas "
                    + "no banco de dados.", "Anteção",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            DefaultTableModel dadosVendas = (DefaultTableModel) tblCompra.getModel();

            String Linha[] = new String[]{"", "", "", "", "", ""};

            try {

                int posicao = -1;
                for (DaoVenda venda : vendas) {
                    posicao++;

                    dadosVendas.addRow(Linha);
                    dadosVendas.setValueAt(venda.getNumVenda(), posicao, 0);
                    dadosVendas.setValueAt(venda.getCodCli(), posicao, 1);
                    dadosVendas.setValueAt(venda.getNome(), posicao, 2);
                    dadosVendas.setValueAt(sdf.format(venda.getDataVenda()), posicao, 3);
                    dadosVendas.setValueAt(sdf.format(venda.getDataEntrega()), posicao, 4);
                    dadosVendas.setValueAt(venda.getObs(), posicao, 5);
                }

            } catch (Exception ex) {

                JOptionPane.showMessageDialog(null, "Ocorreu um erro"
                        + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

            }

        }

    }

    private void atualizaTableItem(ArrayList<DaoItemVenda> itens) {

        LimpaTable(tblProduto);

        double total = 0;

        if (itens.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não foram encontrados "
                    + "Itens nessa venda!", "Anteção",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            DefaultTableModel dadosItens = (DefaultTableModel) tblProduto.getModel();

            String Linha[] = new String[]{"", "", "", "", ""};

            try {

                int posicao = -1;
                for (DaoItemVenda item : itens) {

                    dadosItens.addRow(Linha);

                    dadosItens.setValueAt(item.getCodPro(), posicao, 0);
                    dadosItens.setValueAt(item.getDescricao(), posicao, 1);
                    dadosItens.setValueAt(item.getQuantidade(), posicao, 2);

                    dadosItens.setValueAt(nfPreco.valueToString(item.getPrecoUnit()), posicao, 3);
                    dadosItens.setValueAt(nfPreco.valueToString(item.getSubtotal()), posicao, 4);

                    total += item.getSubtotal();

                }

                txtTotalVenda.setText(nfPreco.valueToString(total));

            } catch (Exception ex) {

                JOptionPane.showMessageDialog(null, "Ocorreu um erro"
                        + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

            }

        }

    }

    private void HabilitarBotoes(boolean hab) {

        btnincluir.setEnabled(hab);
        btnAlterar.setEnabled(hab);
        btnPesquisar.setEnabled(hab);
        btnAlterar.setEnabled(hab);
        btnExcluir.setEnabled(hab);
        btnGravar.setEnabled(!hab);
        btnCancelar.setEnabled(!hab);

    }

    private void habilitarCampos(boolean hab, JComponent container) {

        for (Component component : container.getComponents()) {
            component.setEnabled(hab);
        }
    }

    private void LimparCampos(JComponent container) {

        for (Component component : container.getComponents()) {

            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            }
            if (component instanceof JComboBox) {
                ((JComboBox) component).setSelectedIndex(0);
            }
            if (component instanceof JFormattedTextField) {
                ((JFormattedTextField) component).setValue("");
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEncerrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnItemAlterar;
    private javax.swing.JButton btnItemExcluir;
    private javax.swing.JButton btnItemIncluir;
    private javax.swing.JButton btnItemPesquisar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnincluir;
    private javax.swing.JComboBox<String> cmbFornecedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlDetalhes;
    private javax.swing.JPanel pnlVenda;
    private javax.swing.JTable tblCompra;
    private javax.swing.JTable tblProduto;
    private javax.swing.JFormattedTextField txtDataCompra;
    private javax.swing.JFormattedTextField txtDataEntrega;
    private javax.swing.JTextField txtFornecedor;
    private javax.swing.JTextField txtNumCompra;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtTotalVenda;
    // End of variables declaration//GEN-END:variables
}
